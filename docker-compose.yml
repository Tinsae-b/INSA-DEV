version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: yearbook_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-yearbook_db}
      POSTGRES_USER: ${POSTGRES_USER:-yearbook_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - yearbook_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-yearbook_user} -d ${POSTGRES_DB:-yearbook_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional - for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: yearbook_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - yearbook_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./astu_yearbook
      dockerfile: Dockerfile
    container_name: yearbook_backend
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 
             --workers 4 
             --timeout 120 
             --access-logfile - 
             --error-logfile - 
             astu_yearbook.wsgi:application"
    volumes:
      - ./astu_yearbook:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - ./astu_yearbook/.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-yearbook_user}:${POSTGRES_PASSWORD:-changeme123}@db:5432/${POSTGRES_DB:-yearbook_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - yearbook_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/yearbook/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: ./astu_front
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000/yearbook/api}
    container_name: yearbook_frontend
    restart: unless-stopped
    volumes:
      - ./astu_front:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000/yearbook/api}
    depends_on:
      - backend
    networks:
      - yearbook_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: yearbook_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - yearbook_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  yearbook_network:
    driver: bridge


